import * as fs from 'fs/promises';
import * as path from 'path';
import * as readline from 'readline';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

import { getModel } from './ai/providers';
import {
  deepResearch,
  writeFinalAnswer,
  writeFinalReport,
} from './deep-research';
import { generateFeedback } from './feedback';
import { exportToNotion } from './integrations/notion';

// Helper function for consistent logging
function log(...args: any[]) {
  console.log(...args);
}

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Helper function to get user input
function askQuestion(query: string): Promise<string> {
  return new Promise(resolve => {
    rl.question(query, answer => {
      resolve(answer);
    });
  });
}

/**
 * Export an existing markdown file to Notion
 * @param filePath Path to the markdown file
 * @param isReport Whether this is a report or answer
 * @returns Object containing the page ID and URL
 */
async function exportFileToNotion(filePath: string, isReport: boolean = true): Promise<{ pageId: string, pageUrl: string }> {
  try {
    log(`Reading markdown file: ${filePath}`);
    
    // Check if file exists
    try {
      await fs.access(filePath);
    } catch (error) {
      throw new Error(`File not found: ${filePath}`);
    }
    
    // Read file content
    const content = await fs.readFile(filePath, 'utf-8');
    
    // Extract title from the first # heading or use filename as fallback
    let title = path.basename(filePath, path.extname(filePath));
    const titleMatch = content.match(/^#\s+(.+)$/m);
    if (titleMatch && titleMatch[1]) {
      title = titleMatch[1];
    }
    
    log(`Title: ${title}`);
    log(`Content length: ${content.length} characters`);
    
    // Check if environment variables are set
    if (!process.env.NOTION_TOKEN || !process.env.NOTION_PARENT_PAGE_ID) {
      throw new Error('Missing required environment variables. Please check your .env.local file.');
    }
    
    // Export to Notion
    log('Exporting to Notion...');
    const result = await exportToNotion(content, title, isReport);
    
    log('Successfully created Notion page!');
    log('Page ID:', result.pageId);
    log('Page URL:', result.pageUrl);
    
    return result;
  } catch (error) {
    log('Error exporting to Notion:', error);
    throw error;
  }
}

/**
 * Test Notion integration by creating a test page
 */
async function testNotionIntegration(): Promise<{ pageId: string, pageUrl: string }> {
  try {
    log('Testing Notion integration...');
    
    // Create a simple sample content
    const title = 'Test Report from Deep Research';
    const content = `
# Sample Research Report

This is a test report to verify the Notion integration is working correctly.

## Key Points

- This report was generated to test the integration
- It uses the Notion API directly
- No research was performed for this test

## Next Steps

If this test is successful, you can use the actual research functionality.

---

*Generated by Deep Research Tool*
`;
    
    // Check if environment variables are set
    if (!process.env.NOTION_TOKEN || !process.env.NOTION_PARENT_PAGE_ID) {
      throw new Error('Missing required environment variables. Please check your .env.local file.');
    }
    
    log('NOTION_TOKEN:', process.env.NOTION_TOKEN.substring(0, 10) + '...');
    log('NOTION_PARENT_PAGE_ID:', process.env.NOTION_PARENT_PAGE_ID);
    
    // Export to Notion
    log('Exporting to Notion...');
    const result = await exportToNotion(content, title, true);
    
    log('Successfully created Notion page!');
    log('Page ID:', result.pageId);
    log('Page URL:', result.pageUrl);
    
    return result;
  } catch (error) {
    log('Error testing Notion integration:', error);
    throw error;
  }
}

// Variable to store the initial query
let researchTitle = 'Research Report';

// run the agent
async function run(args: string[] = process.argv.slice(2)) {
  // Parse command line arguments
  const exportToNotionFlag = args.includes('--export-to-notion');
  const testNotionFlag = args.includes('--test-notion');
  
  // If exporting existing file to Notion
  if (exportToNotionFlag) {
    const fileIndex = args.findIndex(arg => !arg.startsWith('--'));
    if (fileIndex === -1) {
      log('Please provide a path to a markdown file.');
      log('Usage: npm run start -- --export-to-notion <file-path> [--answer]');
      process.exit(1);
    }
    
    const filePath = args[fileIndex];
    if (!filePath) {
      log('File path is undefined.');
      process.exit(1);
    }
    
    const isReport = !args.includes('--answer');
    
    exportFileToNotion(filePath, isReport)
      .then(() => {
        log('Successfully exported to Notion!');
        process.exit(0);
      })
      .catch((error: unknown) => {
        log('Failed to export to Notion:', error instanceof Error ? error.message : String(error));
        process.exit(1);
      });
      
    return;
  }
  
  // If testing Notion integration
  if (testNotionFlag) {
    testNotionIntegration()
      .then(() => {
        log('Notion integration test completed successfully!');
        process.exit(0);
      })
      .catch((error: unknown) => {
        log('Notion integration test failed:', error instanceof Error ? error.message : String(error));
        process.exit(1);
      });
      
    return;
  }
  
  // Normal research flow
  log('Using model: ', getModel().modelId);

  // Get initial query - askQuestion always returns a string (empty string if nothing entered)
  const initialQuery = await askQuestion('What would you like to research? ');
  researchTitle = initialQuery || 'Research Report';

  // Get breath and depth parameters
  const breadth =
    parseInt(
      await askQuestion(
        'Enter research breadth (recommended 2-10, default 4): ',
      ),
      10,
    ) || 4;
  const depth =
    parseInt(
      await askQuestion('Enter research depth (recommended 1-5, default 2): '),
      10,
    ) || 2;
  const isReport =
    (await askQuestion(
      'Do you want to generate a long report or a specific answer? (report/answer, default report): ',
    )) !== 'answer';

  let combinedQuery = initialQuery as string;
  if (isReport) {
    log(`Creating research plan...`);

    // Generate follow-up questions
    const followUpQuestions = await generateFeedback({
      query: initialQuery,
    });

    log(
      '\nTo better understand your research needs, please answer these follow-up questions:',
    );

    // Collect answers to follow-up questions
    const answers: string[] = [];
    for (const question of followUpQuestions) {
      const answer = await askQuestion(`\n${question}\nYour answer: `);
      answers.push(answer);
    }

    // Combine all information for deep research
    combinedQuery = `
Initial Query: ${initialQuery}
Follow-up Questions and Answers:
${followUpQuestions.map((q: string, i: number) => `Q: ${q}\nA: ${answers[i]}`).join('\n')}
`;
  }

  log('\nStarting research...\n');

  const { learnings, visitedUrls } = await deepResearch({
    query: combinedQuery,
    breadth,
    depth,
  });

  log(`\n\nLearnings:\n\n${learnings.join('\n')}`);
  log(`\n\nVisited URLs (${visitedUrls.length}):\n\n${visitedUrls.join('\n')}`);
  log('Writing final report...');

  let content = '';
  let outputFile = '';
  if (isReport) {
    content = await writeFinalReport({
      prompt: combinedQuery,
      learnings,
      visitedUrls,
    });

    outputFile = 'report.md';
    await fs.writeFile(outputFile, content, 'utf-8');
    console.log(`\n\nFinal Report:\n\n${content}`);
    console.log(`\nReport has been saved to ${outputFile}`);
  } else {
    content = await writeFinalAnswer({
      prompt: combinedQuery,
      learnings,
    });

    outputFile = 'answer.md';
    await fs.writeFile(outputFile, content, 'utf-8');
    console.log(`\n\nFinal Answer:\n\n${content}`);
    console.log(`\nAnswer has been saved to ${outputFile}`);
  }

  // Check if the user wants to export to Notion
  const shouldExportToNotion = (await askQuestion(
    '\nWould you like to export this to Notion? (yes/no): ',
  )).toLowerCase().startsWith('y');

  if (shouldExportToNotion) {
    try {
      // Check if environment variables are set
      if (!process.env.NOTION_TOKEN || !process.env.NOTION_PARENT_PAGE_ID) {
        log('\nMissing required environment variables for Notion export. Please set NOTION_TOKEN and NOTION_PARENT_PAGE_ID in your .env.local file.');
      } else {
        log('\nExporting to Notion...');
        
        // Determine a suitable title for the Notion page
        let pageTitle = 'Research Report'; // Default
        
        // First try to use the research title if available
        if (researchTitle && researchTitle !== 'Research Report') {
          pageTitle = researchTitle;
        } else {
          // Then try to extract from the first heading in content
          const titleMatch = content.match(/^#\s+(.+)$/m);
          if (titleMatch && titleMatch[1]) {
            pageTitle = titleMatch[1];
          }
        }
        
        // Create a wrapper function that ensures string parameters
        const safeExport = async (content: string, title: string, isReport: boolean) => {
          return await exportToNotion(content, title, isReport);
        };
        
        // Use the safe wrapper
        const result = await safeExport(content, pageTitle, isReport);
        
        log('\nSuccessfully exported to Notion!');
        if (result && result.pageUrl) {
          log(`\nView your page at: ${result.pageUrl}`);
        }
      }
    } catch (error: any) {
      log('\nError exporting to Notion:', error.message);
      log('Please check your Notion configuration.');
    }
  }

  rl.close();
}

// Allow direct running or importing
if (require.main === module) {
  run().catch(console.error);
}

export { run, exportFileToNotion, testNotionIntegration };
