import { Client } from "@notionhq/client";
import { BlockObjectRequest } from "@notionhq/client/build/src/api-endpoints";

/**
 * Exports report content to Notion using the Notion SDK
 * @param content The report or answer content to export
 * @param title The title of the research
 * @param isReport Whether this is a report or answer
 * @returns Object containing the ID of the created page
 */
export async function exportToNotion(
  content: string,
  title: string,
  isReport: boolean
) {
  try {
    if (!process.env.NOTION_TOKEN) {
      throw new Error('NOTION_TOKEN is not defined in environment variables');
    }
    
    if (!process.env.NOTION_PARENT_PAGE_ID) {
      throw new Error('NOTION_PARENT_PAGE_ID is not defined in environment variables');
    }

    const notion = new Client({ auth: process.env.NOTION_TOKEN });
    
    // Convert markdown content to Notion blocks
    const contentBlocks = convertToNotionBlocks(content);
    
    // Create the Notion page
    const response = await notion.pages.create({
      parent: {
        type: "page_id",
        page_id: process.env.NOTION_PARENT_PAGE_ID,
      },
      properties: {
        title: {
          type: "title",
          title: [
            {
              type: "text",
              text: {
                content: title + (isReport ? " (Research Report)" : " (Research Answer)"),
              },
            },
          ],
        },
      },
      children: [
        {
          object: "block",
          type: "paragraph",
          paragraph: {
            rich_text: [
              {
                type: "text",
                text: {
                  content: isReport 
                    ? "Research Report generated by Deep Research" 
                    : "Research Answer generated by Deep Research",
                },
                annotations: {
                  bold: true,
                  italic: true,
                }
              },
            ],
          },
        } as BlockObjectRequest,
        ...contentBlocks,
      ],
    });

    return {
      pageId: response.id,
      pageUrl: `https://notion.so/${response.id.replace(/-/g, '')}`
    };
  } catch (error) {
    console.error('Error creating Notion page:', error);
    throw error;
  }
}

/**
 * Helper function to convert markdown content string into Notion blocks
 * Handles various markdown syntax like headings, lists, and code blocks
 */
function convertToNotionBlocks(content: string): BlockObjectRequest[] {
  // Split content by lines
  const lines = content.split('\n');
  const blocks: BlockObjectRequest[] = [];
  
  let i = 0;
  let currentListItems: string[] = [];
  let currentCodeBlock: string[] = [];
  let inCodeBlock = false;
  
  while (i < lines.length) {
    const line = lines[i]?.trim() || '';
    
    // Skip empty lines
    if (!line) {
      // If we were collecting a list and encounter an empty line, finish the list
      if (currentListItems.length > 0) {
        blocks.push(createBulletedListBlock(currentListItems));
        currentListItems = [];
      }
      i++;
      continue;
    }
    
    // Handle code blocks
    if (line.startsWith('```')) {
      if (!inCodeBlock) {
        // Start of code block
        inCodeBlock = true;
        currentCodeBlock = [];
      } else {
        // End of code block, add it to blocks
        blocks.push(createCodeBlock(currentCodeBlock.join('\n')));
        currentCodeBlock = [];
        inCodeBlock = false;
      }
      i++;
      continue;
    }
    
    if (inCodeBlock) {
      // Collect code block content
      currentCodeBlock.push(line);
      i++;
      continue;
    }
    
    // Handle headings
    if (line.startsWith('# ')) {
      blocks.push(createHeadingBlock(line.substring(2), 'heading_1'));
      i++;
      continue;
    }
    
    if (line.startsWith('## ')) {
      blocks.push(createHeadingBlock(line.substring(3), 'heading_2'));
      i++;
      continue;
    }
    
    if (line.startsWith('### ')) {
      blocks.push(createHeadingBlock(line.substring(4), 'heading_3'));
      i++;
      continue;
    }
    
    // Handle bulleted lists
    if (line.startsWith('- ') || line.startsWith('* ')) {
      const listItemContent = line.substring(2);
      currentListItems.push(listItemContent);
      i++;
      
      // Check ahead for more list items
      let nextLine = i < lines.length ? lines[i]?.trim() || '' : '';
      while (i < lines.length && nextLine && (nextLine.startsWith('- ') || nextLine.startsWith('* '))) {
        currentListItems.push(nextLine.substring(2));
        i++;
        nextLine = i < lines.length ? lines[i]?.trim() || '' : '';
      }
      
      blocks.push(createBulletedListBlock(currentListItems));
      currentListItems = [];
      continue;
    }
    
    // Handle numbered lists
    if (/^\d+\.\s/.test(line)) {
      const listItems: string[] = [];
      const listItemContent = line.replace(/^\d+\.\s/, '');
      listItems.push(listItemContent);
      i++;
      
      // Check ahead for more list items
      let nextLine = i < lines.length ? lines[i]?.trim() || '' : '';
      while (i < lines.length && nextLine && /^\d+\.\s/.test(nextLine)) {
        listItems.push(nextLine.replace(/^\d+\.\s/, ''));
        i++;
        nextLine = i < lines.length ? lines[i]?.trim() || '' : '';
      }
      
      blocks.push(createNumberedListBlock(listItems));
      continue;
    }
    
    // Regular paragraph
    let paragraphContent = line;
    i++;
    
    // Check if there are more lines to combine into a paragraph
    while (i < lines.length && 
           lines[i]?.trim() !== '' && 
           !lines[i]?.trim().startsWith('#') &&
           !lines[i]?.trim().startsWith('-') &&
           !lines[i]?.trim().startsWith('*') &&
           !lines[i]?.trim().startsWith('```') &&
           !/^\d+\.\s/.test(lines[i]?.trim() || '')) {
      paragraphContent += '\n' + lines[i]?.trim();
      i++;
    }
    
    blocks.push(createParagraphBlock(paragraphContent));
  }
  
  // Handle any remaining list items
  if (currentListItems.length > 0) {
    blocks.push(createBulletedListBlock(currentListItems));
  }
  
  // Handle any unclosed code block
  if (currentCodeBlock.length > 0) {
    blocks.push(createCodeBlock(currentCodeBlock.join('\n')));
  }
  
  return blocks;
}

/**
 * Creates a paragraph block with given text content
 */
function createParagraphBlock(content: string): BlockObjectRequest {
  return {
    object: "block",
    type: "paragraph",
    paragraph: {
      rich_text: [
        {
          type: "text",
          text: {
            content,
          },
        },
      ],
    },
  };
}

/**
 * Creates a heading block with specified heading level
 */
function createHeadingBlock(
  content: string,
  headingType: 'heading_1' | 'heading_2' | 'heading_3'
): BlockObjectRequest {
  if (headingType === 'heading_1') {
    return {
      object: "block",
      type: "heading_1",
      heading_1: {
        rich_text: [
          {
            type: "text",
            text: {
              content,
            },
          },
        ],
      },
    };
  } else if (headingType === 'heading_2') {
    return {
      object: "block",
      type: "heading_2",
      heading_2: {
        rich_text: [
          {
            type: "text",
            text: {
              content,
            },
          },
        ],
      },
    };
  } else {
    return {
      object: "block",
      type: "heading_3",
      heading_3: {
        rich_text: [
          {
            type: "text",
            text: {
              content,
            },
          },
        ],
      },
    };
  }
}

/**
 * Creates a code block with given content
 */
function createCodeBlock(content: string): BlockObjectRequest {
  return {
    object: "block",
    type: "code",
    code: {
      rich_text: [
        {
          type: "text",
          text: {
            content,
          },
        },
      ],
      language: "plain text",
    },
  };
}

/**
 * Creates a bulleted list block from array of list items
 */
function createBulletedListBlock(items: string[]): BlockObjectRequest {
  return {
    object: "block",
    type: "bulleted_list_item",
    bulleted_list_item: {
      rich_text: [
        {
          type: "text",
          text: {
            content: items.join('\n'),
          },
        },
      ],
    },
  };
}

/**
 * Creates a numbered list block from array of list items
 */
function createNumberedListBlock(items: string[]): BlockObjectRequest {
  return {
    object: "block",
    type: "numbered_list_item",
    numbered_list_item: {
      rich_text: [
        {
          type: "text",
          text: {
            content: items.join('\n'),
          },
        },
      ],
    },
  };
} 